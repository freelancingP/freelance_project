# Generated by Django 4.2.3 on 2023-10-29 09:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('gender', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.CharField(blank=True, max_length=100, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('height_unit', models.CharField(blank=True, max_length=10, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('weight_unit', models.CharField(blank=True, max_length=10, null=True)),
                ('health_issue', models.CharField(blank=True, max_length=1000, null=True)),
                ('other_issue', models.CharField(blank=True, max_length=1000, null=True)),
                ('any_medication', models.CharField(blank=True, max_length=500, null=True)),
                ('veg_nonveg', models.CharField(blank=True, max_length=500, null=True)),
                ('profession', models.CharField(blank=True, max_length=200, null=True)),
                ('help', models.CharField(blank=True, max_length=500, null=True)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, related_name='user_profiles', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='user_profiles_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AddRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=1000)),
                ('sub_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('quantity_type', models.CharField(blank=True, max_length=100, null=True)),
                ('quantity', models.FloatField(blank=True, null=True)),
                ('quantity_help', models.CharField(blank=True, max_length=200, null=True)),
                ('type_of_meal', models.CharField(blank=True, max_length=100, null=True)),
                ('type_of_food', models.CharField(blank=True, max_length=100, null=True)),
                ('health_condition', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DailySnacks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('evening_snacks', 'Evening Snacks')], max_length=15)),
                ('food', models.CharField(blank=True, max_length=200, null=True)),
                ('quantity', models.CharField(max_length=10, null=True)),
                ('ingredients', models.CharField(blank=True, max_length=255, null=True)),
                ('veg_nonveg_egg', models.CharField(choices=[('Vegetarian', 'Vegetarian'), ('Non Vegetarian', 'Non Vegetarian'), ('Eggetarian', 'Eggetarian'), ('Pescatarian', 'Pescatarian'), ('Pollotarian', 'Pollotarian'), ('Vegan', 'Vegan')], max_length=30)),
                ('pral', models.FloatField(default=0.0, null=True)),
                ('oil', models.FloatField(default=0.0, null=True)),
                ('gl', models.FloatField(default=0.0, null=True)),
                ('cals', models.FloatField(default=0.0, null=True)),
                ('kcal', models.FloatField(default=0.0, null=True)),
                ('aaf_adj_prot', models.FloatField(default=0.0, null=True)),
                ('carbs', models.FloatField(default=0.0, null=True)),
                ('total_fat', models.FloatField(default=0.0, null=True)),
                ('tdf', models.FloatField(default=0.0, null=True)),
                ('sodium', models.FloatField(default=0.0, null=True)),
                ('potassium', models.FloatField(default=0.0, null=True)),
                ('phosphorus', models.FloatField(default=0.0, null=True)),
                ('calcium', models.FloatField(default=0.0, null=True)),
                ('magnesium', models.FloatField(default=0.0, null=True)),
                ('total_eaa', models.FloatField(default=0.0, null=True)),
                ('lysine', models.FloatField(default=0.0, null=True)),
                ('gross_protein', models.FloatField(default=0.0, null=True)),
                ('free_sugar', models.FloatField(default=0.0, null=True)),
                ('aa_factor', models.FloatField(default=0.0, null=True)),
                ('glucose', models.FloatField(default=0.0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dishes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food', models.CharField(blank=True, max_length=200, null=True)),
                ('price', models.CharField(max_length=10, null=True)),
                ('oil', models.FloatField(null=True)),
                ('gl', models.FloatField(null=True)),
                ('useble_cals', models.FloatField(null=True)),
                ('aaf_adj_prot', models.FloatField(null=True)),
                ('carbs', models.FloatField(null=True)),
                ('total_fat', models.FloatField(null=True)),
                ('tdf', models.FloatField(null=True)),
                ('sodium', models.FloatField(null=True)),
                ('potassium', models.FloatField(null=True)),
                ('phasphorous', models.FloatField(null=True)),
                ('calcium', models.FloatField(null=True)),
                ('magnecium', models.FloatField(null=True)),
                ('total_eaa', models.FloatField(null=True)),
                ('lysine', models.FloatField(null=True)),
                ('gross_protine', models.FloatField(null=True)),
                ('free_suger', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.TextField(blank=True, null=True)),
                ('dish_name', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('evening_snacks', 'Evening Snacks')], max_length=15)),
                ('serving_size', models.CharField(choices=[('gms', 'Breakfast'), ('ml', 'Lunch'), ('quantity', 'quantity')], max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='UserSnacks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_engine.dailysnacks')),
            ],
        ),
        migrations.CreateModel(
            name='UserOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.IntegerField()),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeIngridient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(blank=True, null=True)),
                ('dishes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_engine.dishes')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_engine.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='DailyRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('dishes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_engine.dailysnacks')),
            ],
        ),
        migrations.CreateModel(
            name='CaloryCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dish_type', models.CharField(blank=True, max_length=100, null=True)),
                ('dish', models.IntegerField(null=True)),
                ('calory', models.FloatField(default=0.0)),
                ('date', models.DateField(blank=True, null=True)),
                ('total_calory', models.FloatField(default=0.0)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AddIngridient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingridient_name', models.CharField(max_length=1000)),
                ('quantity_type', models.CharField(blank=True, max_length=100, null=True)),
                ('ingridient_quantity', models.FloatField(null=True)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('calories', models.FloatField(blank=True, null=True)),
                ('fat', models.FloatField(blank=True, null=True)),
                ('carps', models.FloatField(blank=True, null=True)),
                ('sugars', models.FloatField(blank=True, null=True)),
                ('sodium', models.FloatField(blank=True, null=True)),
                ('fiber', models.FloatField(blank=True, null=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_engine.addrecipe')),
            ],
        ),
    ]
